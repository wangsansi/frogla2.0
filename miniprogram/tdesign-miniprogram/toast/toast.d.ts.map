{"version":3,"sources":["../src/toast/toast.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAGlE,OAAO,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAK3C,aAAK,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AAGnC,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,cAAc;IAC/C,eAAe,WAAe;IAE9B,OAAO;;MAEL;IAEF,SAAS,EAAE,KAAK,CAAQ;IAExB,WAAW,EAAE,KAAK,CAAQ;IAE1B,IAAI;;;;;MAKF;IAEF,UAAU,gCAAS;IAEnB,QAAQ;IAIR,OAAO;sBACS,gBAAgB;;;MAoD9B;CACH","file":"toast.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { ToastOptionsType } from './index';\n\nconst { prefix } = config;\nconst name = `${prefix}-toast`;\n\ntype Timer = NodeJS.Timeout | null;\n\n@wxComponent()\nexport default class Toast extends SuperComponent {\n  externalClasses = ['t-class'];\n\n  options = {\n    multipleSlots: true, // 在组件定义时的选项中启用多slot支持\n  };\n\n  hideTimer: Timer = null;\n\n  removeTimer: Timer = null;\n\n  data = {\n    inserted: false,\n    show: false,\n    classPrefix: name,\n    typeMapIcon: '',\n  };\n\n  properties = props;\n\n  detached() {\n    this.destroyed();\n  }\n\n  methods = {\n    show(options: ToastOptionsType) {\n      if (this.hideTimer) clearTimeout(this.hideTimer);\n      if (this.removeTimer) clearTimeout(this.removeTimer);\n      const iconMap = {\n        loading: 'loading',\n        success: 'check-circle',\n        fail: 'error-circle',\n      };\n      const typeMapIcon = iconMap[options?.theme] || '';\n      const defaultOptions = {\n        direction: props.direction.value,\n        duration: props.duration.value,\n        icon: props.icon.value,\n        message: props.message.value,\n        placement: props.placement.value,\n        preventScrollThrough: props.preventScrollThrough.value,\n        theme: props.theme.value,\n      };\n\n      const data = {\n        ...defaultOptions,\n        ...options,\n        show: true,\n        typeMapIcon,\n        inserted: true,\n      };\n      const { duration } = data;\n      this.setData(data);\n      this.hideTimer = setTimeout(() => {\n        this.clear();\n      }, duration as any);\n    },\n\n    clear() {\n      this.setData({ show: false });\n      this.removeTimer = setTimeout(() => {\n        this.setData({\n          inserted: false,\n        });\n      }, 300);\n    },\n\n    destroyed() {\n      if (this.removeTimer) {\n        clearTimeout(this.removeTimer);\n        this.removeTimer = null;\n      }\n      if (this.hideTimer) {\n        clearTimeout(this.hideTimer);\n        this.hideTimer = null;\n      }\n    },\n  };\n}\n"]}